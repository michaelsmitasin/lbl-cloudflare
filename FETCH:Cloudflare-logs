#! /bin/sh
###############################################################################
# Fetch logs of websites behind Cloudflare via their API
#
# MNSmitasin@lbl.gov 2020-04-07
#
###############################################################################
### LOCAL VARIABLES

NOTIFYEMAIL="admin@example.com"

RUNTS=$(date -j "+%s")

# Paths
FEEDDIR="/home/feeds/CLOUDFLARE-logs"
LIBDIR="/home/feeds/lib"
TEMPPATH="/var/tmp/cloudflare-logs-$RUNTS"

# Cloudflare variables
CFAPIVERSION="v4"

# Authentication
USERNAME="feeds@example.com"
AUTHKEY=$(cat $LIBDIR/CLOUDFLARE-api-key | grep -v "\#")

# For zone fetch pagination, initialize the variable for first run
ZONEDATA="INIT"
THISPAGE="1"

# Other variablse
#FIELDLIST="ClientIP,RayID,EdgeStartTimestamp"
FIELDLIST="\
EdgeStartTimestamp,\
ClientIP,\
ClientSrcPort,\
ClientSSLCipher,\
ClientSSLProtocol,\
ClientRequestMethod,\
ClientRequestProtocol,\
ClientRequestHost,\
ClientRequestURI,\
ClientRequestBytes,\
ClientRequestUserAgent,\
ClientRequestReferer,\
OriginIP,\
OriginResponseStatus,\
OriginResponseBytes,\
CacheCacheStatus,\
EdgeServerIP,\
WAFAction,\
WAFFlags,\
WAFMatchedVar,\
WAFProfile,\
WAFRuleID,\
WAFRuleMessage"

# set initial values to null so we can set them with getopts 
STARTTIME=""
ENDTIME=""
EXECOPT=""

###############################################################################
### FUNCTIONS

USAGE(){
        echo "Usage:"
        echo "$0 -[b|r] -s <starttime> -e <endtime>"
        echo "  -b      build mode"
        echo "  -r      run mode"
        echo "  -s      start time (epoch)"
        echo "  -e      end time (epoch)"
        echo ""
        exit 1
}

if [ -z "$1" ]
then
        echo "Error: no options specified"
        USAGE
else
        :
fi

while getopts "brz:s:e:h?" OPT; do
case $OPT in
        b) EXECOPT="BUILD" ;;
        r) EXECOPT="RUN" ;;
        z) ZONEID="$OPTARG" ;;
        s) STARTTIME="$OPTARG" ;;
        e) ENDTIME="$OPTARG" ;;
        h) USAGE ;;
        ?) USAGE ;;
        \?) USAGE ;;
esac
done

if [ -z "$EXECOPT" ]
then
        echo "Error: must specify -b or -r"
        USAGE
else
        :
fi

### Build stage

SETBUILDTIME(){
# if starttime/endtime not specified, set it to 1h10m ago to 10m ago
if [ -z "$STARTTIME" ]
then
        STARTTIME="$(date -j -v-1H -v-10M +%s)"
        ENDTIME="$(date -j -v-10M +%s)"
else
        :
fi
}

# List Zones
# Continue looping over pages of zone IDs until no more are returned
GETZONES(){
        while [ ! -z "$ZONEDATA" ]
        do
                ZONEDATA=$(/usr/local/bin/curl -s -X GET "https://api.cloudflare.com/client/v4/zones?status=active&per_page=20&page=$THISPAGE" \
                        -H "X-Auth-Email: $USERNAME" \
                        -H "X-Auth-Key: $AUTHKEY" \
                        -H "Accept: application/json" | /usr/local/bin/jq -r '.result[]| .id')
                sleep 1 
                echo "$ZONEDATA"
                # Increment the page number
                THISPAGE=$(echo "$THISPAGE" + 1 | bc)
        done
}

BUILDCMDS(){
  echo "$ZONEIDS" | xargs -n1 -I@ echo "$0 -r -z @ -s $INTVSTARTTIME -e $INTVENDTIME >> $TEMPPATH/zone-@-$INTVSTARTTIME.json" > $TEMPPATH/parallel-cmds
}

RUNCMDS(){
  /usr/local/bin/parallel -j10 -a $TEMPPATH/parallel-cmds
} 

CONSOLIDATE(){
  THISMONTH=$(date -j -r $STARTTIME "+%Y-%m")
  OUTFILE=$(date -j -r $STARTTIME "+%Y-%m-%d")
  OUTPATH="$FEEDDIR/$THISMONTH"
  mkdir -p "$OUTPATH"
  cat $TEMPPATH/zone*.json >> "$OUTPATH"/"$OUTFILE"
}

### Run stage

CHECKTIMES(){
if [ -z "$STARTTIME" ]
then
        echo "Error: no start time specified"
        USAGE
else
        :
fi

if [ -z "$ENDTIME" ]
then
        echo "Error: no end time specified"
        USAGE
else
        :
fi
}

FETCH(){
  echo "INFO: $STARTTIME $ZONEID" >> $FEEDDIR/cloudflare-fetch.log
  RESULTS=$(/usr/local/bin/curl -s -X GET "https://api.cloudflare.com/client/$CFAPIVERSION/zones/$ZONEID/logs/received?start=$STARTTIME&end=$ENDTIME&fields=$FIELDLIST&timestamps=unixnano" \
    -H "X-Auth-Email: $USERNAME" \
    -H "X-Auth-Key: $AUTHKEY" \
    -H "Accept: application/json")
}

# If any line in the results doesn't match the known-good criteria, retry
CHECKRESULTS(){
  if [ -z "$(echo "$RESULTS" | grep -v '^{"CacheCacheStatus".*"}')" ]
    then
      echo "$RESULTS" | grep -v '^$'
      RUNCOUNT="5"
    else
      echo "ERROR: run $RUNCOUNT: $STARTTIME $ZONEID: $RESULTS" | tr -d "\n" | cut -c -256 >> $FEEDDIR/cloudflare-fetch.log 
      echo "" >> $FEEDDIR/cloudflare-fetch.log 
      RUNCOUNT=$(echo "$RUNCOUNT" + 1 | bc)
      sleep 5
  fi
}

PULL(){
  RUNCOUNT="0"
  while [ "$RUNCOUNT" -le 4 ]
  do
    FETCH
    CHECKRESULTS
  done
}

###############################################################################
### EXECUTION

# Execute different functions depending on mode
if [ "$EXECOPT" == "BUILD" ]
then
        SETBUILDTIME
        ZONEIDS=$(GETZONES)
        mkdir -p $TEMPPATH
        while [ "$STARTTIME" -lt "$ENDTIME" ]
        do
                INTVSTARTTIME=$(date -j -r "$STARTTIME" -u "+%Y-%m-%dT%H:%M:%SZ")
                STARTTIME=$(echo "$STARTTIME + 3600" | bc)
                INTVENDTIME=$(date -j -r "$STARTTIME" -u "+%Y-%m-%dT%H:%M:%SZ")
                BUILDCMDS
                RUNCMDS
                # add a delay so that we don't hit the rate limit
                sleep 30
        done
        # when this run is done, consolidate the json to the final file
        CONSOLIDATE
        # remove the temp files
        logger "$0 - removing $TEMPPATH"
        rm -r "$TEMPPATH"
elif [ "$EXECOPT" == "RUN" ]
then
        CHECKTIMES
        PULL
else 
        echo "Error: unknown mode"
        USAGE
fi

###############################################################################
### CLEANUP
exit 0
